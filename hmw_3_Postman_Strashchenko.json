{
	"info": {
		"_postman_id": "3af6e26f-ac9c-4242-968f-64703f1174ce",
		"name": "hmw_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19713429"
	},
	"item": [
		{
			"name": "User_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let responceData = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let requestData = request.data;\r",
							"\r",
							"//  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"let propertyArr = [\r",
							"    \"start_qa_salary\",\r",
							"    \"qa_salary_after_6_months\", \r",
							"    \"qa_salary_after_12_months\", \r",
							"    \"qa_salary_after_1.5_year\", \r",
							"    \"qa_salary_after_3.5_years\",\r",
							"    \"person\"\r",
							"    ]\r",
							"\r",
							" propertyArr.forEach(function(name_of_property){\r",
							"       pm.test(`Check  ${name_of_property} property `, function () {\r",
							"        pm.expect(responceData).to.have.property(name_of_property);\r",
							"\r",
							"    });\r",
							"})\r",
							"\r",
							"// ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"let salaryArr = {\r",
							"    \"start_qa_salary\": 1,\r",
							"    \"qa_salary_after_6_months\": 2, \r",
							"    \"qa_salary_after_12_months\": 2.7, \r",
							"    \"qa_salary_after_1.5_year\": 3.3, \r",
							"    \"qa_salary_after_3.5_years\": 3.8\r",
							"}\r",
							"\r",
							"for (let prop in salaryArr) {\r",
							"    pm.test(`Check ${prop}`, function () {\r",
							"        pm.expect(+responceData[prop]).to.eql(+requestData.salary*salaryArr[prop]);\r",
							"});\r",
							"    \r",
							"}\r",
							"\r",
							"// *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.\r",
							"for (let prop in salaryArr) {\r",
							"    pm.test(`Check  ${prop} property `, function () {\r",
							"        pm.expect(responceData).to.have.property(prop);\r",
							"\r",
							"    });\r",
							"    pm.test(`Check ${prop}`, function () {\r",
							"        pm.expect(+responceData[prop]).to.eql(+requestData.salary*salaryArr[prop]);\r",
							"});\r",
							"    \r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Спарсить response body в json.\r",
							"let responceData = pm.response.json();\r",
							"\r",
							"//  Спарсить request.\r",
							"let requestData = pm.request.url.query.toObject();\r",
							"\r",
							"//  Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест.\r",
							"responceData.salary.forEach(function(salary, index){  \r",
							"pm.test(`Check ${index} salary`, function () {\r",
							"    pm.expect(+salary).to.eql(+requestData.salary*(index+1));\r",
							"    console.log('salary[' + index + '] = ' + salary)\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить response body в json.\r",
							"let responceData = pm.response.json();\r",
							"\r",
							"//  Спарсить request.\r",
							"let requestData = pm.request.url.query.toObject();\r",
							"\r",
							"let requestArr = {\r",
							"    \"name\": requestData.name,\r",
							"    \"age\": +requestData.age,\r",
							"    \"salary\": +requestData.salary\r",
							"}; \r",
							"\r",
							"console.log(requestArr);\r",
							"\r",
							"let responceArr = {\r",
							"    \"name\": responceData.name,\r",
							"    \"age\": +responceData.age,\r",
							"    \"salary\": +responceData.salary\r",
							"};\r",
							"\r",
							"console.log(responceArr);\r",
							"\r",
							"//  Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)\r",
							"pm.test(\"Check responce and request arrays\", function () {\r",
							"    pm.expect(requestArr).to.deep.equal(responceArr);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}:{{port}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		}
	]
}